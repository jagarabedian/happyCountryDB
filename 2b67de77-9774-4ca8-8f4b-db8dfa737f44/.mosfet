{
  "layout": "Cloud",
  "image": "image.png",
  "rdbmsId": "2b67de77-9774-4ca8-8f4b-db8dfa737f44",
  "hidden": false,
  "engine": "happyCountryDB",
  "insightName": "Happiness",
  "recipe": "AddPanel ( 0 ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eUnfilterFrame(\u003cSelectedColumn\u003e);\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : true , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif(IsEmpty(\u003cSelectedValues\u003e), UnfilterFrame(\u003cSelectedColumn\u003e), SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : true , \"default\" : true , \"disabled\" : false } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;Panel ( 0 ) | SetPanelView ( \"federate-view\" , \"\u003cencode\u003e{\"core_engine\":\"happyCountryDB\"}\u003c/encode\u003e\" ) ;CreateFrame ( grid ) .as ( [ \u0027FRAME144309\u0027 ] ) ;Database ( happyCountryDB ) | Select ( Country , Country__Dystopia_Residual , Country__Economy_GDP_per_Capita , Country__Family , Country__Freedom , Country__Generosity , Country__Happiness_Rank , Country__Happiness_Score , Country__Health_Life_Expectancy , Country__Region , Country__Standard_Error , Country__Trust_Government_Corruption , Country__Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Import ( ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;\u003cj\u003e\u003cencode\u003esynchronizeGridToRDataTable(\"FRAME144309\")\u003c/encode\u003e\u003c/j\u003e ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;DropRows ( Filter ( Year \u003d\u003d \"2015\" ) ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Select ( ( ( 157 - Happiness_Rank ) + 1 ) , Happiness_Rank ) .as ( [ Inverse_Rank , Happiness_Rank ] ) | Merge ( ( Happiness_Rank , inner.join , Happiness_Rank ) ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year , Inverse_Rank ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year , Inverse_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" , \"Inverse_Rank\" ] } } } ) | Collect ( 500 ) ;Database ( Country_Age ) | Select ( WHS9_86WHS9_88WHS9_89WHS9_92WHS9_96WHS9_97WHS9_90CSV , WHS9_86WHS9_88WHS9_89WHS9_92WHS9_96WHS9_97WHS9_90CSV__Population_median_age_years ) .as ( [ WHS9_86WHS9_88WHS9_89WHS9_92WHS9_96WHS9_97WHS9_90CSV , Population_median_age_years ] ) | Merge ( ( Country , inner.join , WHS9_86WHS9_88WHS9_89WHS9_92WHS9_96WHS9_97WHS9_90CSV ) ) ;Database ( Country_Age ) | Select ( WHS9_86WHS9_88WHS9_89WHS9_92WHS9_96WHS9_97WHS9_90CSV , WHS9_86WHS9_88WHS9_89WHS9_92WHS9_96WHS9_97WHS9_90CSV__Population_median_age_years ) .as ( [ WHS9_86WHS9_88WHS9_89WHS9_92WHS9_96WHS9_97WHS9_90CSV , Population_median_age_years ] ) | Merge ( ( Country , inner.join , WHS9_86WHS9_88WHS9_89WHS9_92WHS9_96WHS9_97WHS9_90CSV ) ) ;Database ( Country_Age ) | Select ( WHS9_86WHS9_88WHS9_89WHS9_92WHS9_96WHS9_97WHS9_90CSV , WHS9_86WHS9_88WHS9_89WHS9_92WHS9_96WHS9_97WHS9_90CSV__Population_median_age_years ) .as ( [ WHS9_86WHS9_88WHS9_89WHS9_92WHS9_96WHS9_97WHS9_90CSV , Population_median_age_years ] ) | Merge ( ( Country , inner.join , WHS9_86WHS9_88WHS9_89WHS9_92WHS9_96WHS9_97WHS9_90CSV ) ) ;Database ( Age_Country2 ) | Select ( Country , Country__Population_median_age_years ) .as ( [ Country , Population_median_age_years ] ) | Merge ( ( Country , inner.join , Country ) ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Population_median_age_years\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Population_median_age_years\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Population_median_age_years\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Database ( CoutryLocal ) | Select ( name_1 , name_1__latitude ) .as ( [ name_1 , latitude ] ) | Merge ( ( Country , inner.join , name_1 ) ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Population_median_age_years\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" , \"latitude\" ] } } } ) | Collect ( 500 ) ;Database ( CoutryLocal ) | Select ( name_1 , name_1__longitude ) .as ( [ name_1 , longitude ] ) | Merge ( ( Country , inner.join , name_1 ) ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Population_median_age_years\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" , \"latitude\" , \"longitude\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Population_median_age_years\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" , \"latitude\" , \"longitude\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ) ) , ( Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Average ( Family ) , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , AverageofFamily , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ] ) | Group ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"Dystopia_Residual\" ] , \"longitude\" : [ \"Economy_GDP_per_Capita\" ] , \"size\" : [ \"AverageofFamily\" ] , \"tooltip\" : [ \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Population_median_age_years\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" , \"latitude\" , \"longitude\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"Dystopia_Residual\" ] , \"longitude\" : [ \"Economy_GDP_per_Capita\" ] , \"size\" : [ \"Family\" ] , \"tooltip\" : [ \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Population_median_age_years\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" , \"latitude\" , \"longitude\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country , latitude , longitude ) ) , ( Select ( Country , latitude , longitude ) .as ( [ Country , latitude , longitude ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"latitude\" ] , \"longitude\" : [ \"longitude\" ] , \"size\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , latitude , longitude ) .as ( [ Country , latitude , longitude ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"latitude\" ] , \"longitude\" : [ \"longitude\" ] , \"size\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country , latitude , longitude ) ) , ( Select ( Country , latitude , longitude , Average ( Inverse_Rank ) ) .as ( [ Country , latitude , longitude , AverageofInverse_Rank ] ) | Group ( Country , latitude , longitude ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"latitude\" ] , \"longitude\" : [ \"longitude\" ] , \"size\" : [ \"AverageofInverse_Rank\" ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , latitude , longitude , Inverse_Rank ) .as ( [ Country , latitude , longitude , Inverse_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"latitude\" ] , \"longitude\" : [ \"longitude\" ] , \"size\" : [ \"Inverse_Rank\" ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country , latitude , longitude , Happiness_Rank ) ) , ( Select ( Country , latitude , longitude , Average ( Inverse_Rank ) , Happiness_Rank ) .as ( [ Country , latitude , longitude , AverageofInverse_Rank , Happiness_Rank ] ) | Group ( Country , latitude , longitude , Happiness_Rank ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"latitude\" ] , \"longitude\" : [ \"longitude\" ] , \"size\" : [ \"AverageofInverse_Rank\" ] , \"tooltip\" : [ \"Happiness_Rank\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , latitude , longitude , Inverse_Rank , Happiness_Rank ) .as ( [ Country , latitude , longitude , Inverse_Rank , Happiness_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"latitude\" ] , \"longitude\" : [ \"longitude\" ] , \"size\" : [ \"Inverse_Rank\" ] , \"tooltip\" : [ \"Happiness_Rank\" ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"standard\"}\u003c/encode\u003e\" ) ;if ( ( HasDuplicates ( Country , latitude , longitude , Happiness_Rank ) ) , ( Select ( Country , latitude , longitude , Average ( Inverse_Rank ) , Happiness_Rank ) .as ( [ Country , latitude , longitude , AverageofInverse_Rank , Happiness_Rank ] ) | Group ( Country , latitude , longitude , Happiness_Rank ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"latitude\" ] , \"longitude\" : [ \"longitude\" ] , \"size\" : [ \"AverageofInverse_Rank\" ] , \"tooltip\" : [ \"Happiness_Rank\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , latitude , longitude , Inverse_Rank , Happiness_Rank ) .as ( [ Country , latitude , longitude , Inverse_Rank , Happiness_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"latitude\" ] , \"longitude\" : [ \"longitude\" ] , \"size\" : [ \"Inverse_Rank\" ] , \"tooltip\" : [ \"Happiness_Rank\" ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;if ( ( HasDuplicates ( Country , latitude , longitude , Happiness_Rank ) ) , ( Select ( Country , latitude , longitude , Average ( Inverse_Rank ) , Happiness_Rank ) .as ( [ Country , latitude , longitude , AverageofInverse_Rank , Happiness_Rank ] ) | Group ( Country , latitude , longitude , Happiness_Rank ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"latitude\" ] , \"longitude\" : [ \"longitude\" ] , \"size\" : [ \"AverageofInverse_Rank\" ] , \"tooltip\" : [ \"Happiness_Rank\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , latitude , longitude , Inverse_Rank , Happiness_Rank ) .as ( [ Country , latitude , longitude , Inverse_Rank , Happiness_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"latitude\" ] , \"longitude\" : [ \"longitude\" ] , \"size\" : [ \"Inverse_Rank\" ] , \"tooltip\" : [ \"Happiness_Rank\" ] } } } ) | Collect ( 500 ) ) ) ;Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Population_median_age_years\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" , \"latitude\" , \"longitude\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Population_median_age_years\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" , \"latitude\" , \"longitude\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Country , latitude , longitude , Happiness_Rank ) ) , ( Select ( Country , latitude , longitude , Average ( Inverse_Rank ) , Happiness_Rank ) .as ( [ Country , latitude , longitude , AverageofInverse_Rank , Happiness_Rank ] ) | Group ( Country , latitude , longitude , Happiness_Rank ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"latitude\" ] , \"longitude\" : [ \"longitude\" ] , \"size\" : [ \"AverageofInverse_Rank\" ] , \"tooltip\" : [ \"Happiness_Rank\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , latitude , longitude , Inverse_Rank , Happiness_Rank ) .as ( [ Country , latitude , longitude , Inverse_Rank , Happiness_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"latitude\" ] , \"longitude\" : [ \"longitude\" ] , \"size\" : [ \"Inverse_Rank\" ] , \"tooltip\" : [ \"Happiness_Rank\" ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"individual\" : { \"Map\" : { \"highlightMaps\" : 7 } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"individual\" : { \"Map\" : { \"highlightMaps\" : 4 } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"individual\" : { \"Map\" : { \"highlightMaps\" : 25 } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"individual\" : { \"Map\" : { \"highlightMaps\" : 3 } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"axisPointer\" : \"shadow\" , \"color\" : \"none\" , \"colorName\" : \"Semoss\" , \"colorByValue\" : [ { \"color\" : \"#de4f85\" , \"highlightRow\" : false , \"colorOn\" : \"Inverse_Rank\" , \"show\" : true , \"global\" : true , \"layout\" : \"Map\" , \"query\" : { \"query\" : \"\" , \"selectedColumns\" : [ ] } , \"ruleId\" : \"1519851321696\" , \"isSimple\" : true , \"operators\" : [ \"\u003d\u003d\" , \"!\u003d\" , \"\u003e\" , \"\u003c\" ] , \"simple\" : { \"operator\" : \"\u003e\" , \"operators\" : [ \"\u003d\u003d\" , \"!\u003d\" , \"\u003e\" , \"\u003c\" ] , \"values\" : [ 1 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 13 , 14 , 16 , 17 , 18 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 32 , 34 , 35 , 36 , 37 , 38 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 51 , 52 , 54 , 55 , 57 , 58 , 59 , 60 , 64 ] , \"task\" : \"task26\" , \"done\" : false , \"value\" : \"147\" , \"header\" : \"Inverse_Rank\" } , \"threshold\" : { \"header\" : \"\" , \"values\" : [ ] , \"value\" : \"\" , \"name\" : \"\" } , \"valuesToColor\" : [ 148 , 149 , 150 , 151 , 152 , 153 , 154 , 155 , 156 , 157 ] } ] , \"echartsColor\" : [ ] , \"backgroundColor\" : \"#FFFFFF\" , \"rotateAxis\" : false , \"xReversed\" : false , \"yReversed\" : false , \"lineGuide\" : true , \"lineStyle\" : { \"type\" : \"solid\" , \"width\" : 3 } , \"lineStyleArea\" : { \"type\" : \"dotted\" , \"width\" : 3 } , \"animation\" : { \"chooseType\" : \"No Animation\" , \"animationSpeed\" : 1 , \"animationDuration\" : 500 } , \"curveType\" : \"Smooth\" , \"customizeBarLabel\" : { \"position\" : \"top\" , \"rotate\" : 0 , \"align\" : \"center\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : 12 , \"fontWeight\" : \"normal\" } , \"animationPie\" : \"None\" , \"changeSymbol\" : { \"chooseType\" : \"Circle\" , \"symbolURL\" : \"\" , \"symbolSize\" : 12 } , \"changeSymbolDendrogram\" : { \"chooseType\" : \"Empty Circle\" , \"symbolURL\" : \"\" , \"symbolSize\" : 12 } , \"customizePieLabel\" : { \"position\" : \"Outside\" , \"dimension\" : \"Name\" , \"fontSize\" : 15 , \"dynamicView\" : \"No\" } , \"customizeFunnelLabel\" : { \"showLabel\" : \"On Hover\" , \"position\" : \"Inside\" , \"dimension\" : \"Name\" , \"fontSize\" : 15 } , \"customizeSunburstLabel\" : { \"showLabel\" : \"On Hover\" , \"position\" : \"Outside\" , \"dimension\" : \"Name\" , \"fontSize\" : 15 , \"dynamicView\" : \"No\" } , \"editBarWidth\" : { \"defaultWidth\" : \"Yes\" , \"barWidth\" : \"Default\" } , \"flipOrder\" : false , \"fitToView\" : false , \"changeAlignment\" : \"center\" , \"clusterExists\" : false , \"showAdjacent\" : false , \"groupBy\" : { } , \"showDirection\" : false , \"timeSeries\" : false , \"toggleExtremes\" : false , \"toggleAverage\" : false , \"toggleArea\" : false , \"toggleAxisPointer\" : true , \"toggleGrid\" : false , \"toggleLegend\" : false , \"toggleShadow\" : false , \"toggleShape\" : true , \"toggleDonut\" : false , \"toggleLayout\" : false , \"toggleRadial\" : false , \"toggleLock\" : true , \"toggleXLabel\" : true , \"toggleZ\" : true , \"togglePolarZoom\" : \"No Zoom\" , \"toggleZoom\" : { \"toggleZoomX\" : \"No\" , \"toggleZoomY\" : \"No\" } , \"toggleTrendline\" : \"No Trendline\" , \"thresholds\" : \"none\" , \"heatmapLegend\" : \"continuous\" , \"rose\" : \"Default\" , \"colorLine\" : true , \"colorChart\" : true , \"thesholdLegend\" : true , \"xAxisThreshold\" : false , \"xMin\" : \"none\" , \"xMax\" : \"none\" , \"yMin\" : \"none\" , \"yMax\" : \"none\" , \"axisType\" : false , \"watermark\" : \"\" , \"sortField\" : \"none\" , \"sortDir\" : \"none\" , \"stackToggle\" : false , \"toggleStack\" : false , \"seriesFlipped\" : false , \"displayValues\" : false , \"yLabelFontSize\" : \"none\" , \"chloroType\" : \"State\" , \"html\" : \"\" , \"varList\" : \"\" , \"fontSize\" : \"12px\" , \"lineCurveType\" : \"Linear\" , \"showHierarchy\" : false , \"showHierarchyByUpstream\" : false , \"showHierarchyId\" : \"none\" , \"showHierarchyName\" : \"none\" , \"showParent\" : true , \"clusterSensitivity\" : 0 , \"mapColorMapping\" : { } , \"mapColorHeader\" : \"\" , \"visualizationRecommendation\" : false , \"treeDepth\" : - 1 } , \"individual\" : { \"Grid\" : { } , \"Map\" : { \"highlightMaps\" : 3 , \"colorByValue\" : [ ] } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorByValue\" : [ ] , \"thresholds\" : \"none\" } , \"individual\" : { \"Map\" : { \"colorByValue\" : [ ] } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : false } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | Clone ( 1 ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( latitude ) ) .as ( [ Country , Averageoflatitude ] ) | Group ( Country ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Pie\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"value\" : [ \"Averageoflatitude\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , latitude ) .as ( [ Country , latitude ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Pie\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"value\" : [ \"latitude\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Inverse_Rank ) ) .as ( [ Region , AverageofInverse_Rank ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Pie\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofInverse_Rank\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Inverse_Rank ) .as ( [ Region , Inverse_Rank ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Pie\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Inverse_Rank\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 1 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"rose\" : \"RoseArea\" } } } ) ;Panel ( 1 ) | RetrievePanelOrnaments ( \"tools.shared.rose\" ) ;Panel ( 1 ) | Clone ( 2 ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Inverse_Rank ) ) .as ( [ Region , AverageofInverse_Rank ] ) | Group ( Region ) | With ( Panel ( 2 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"2\" : { \"layout\" : \"Cloud\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofInverse_Rank\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Inverse_Rank ) .as ( [ Region , Inverse_Rank ] ) | With ( Panel ( 2 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"2\" : { \"layout\" : \"Cloud\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Inverse_Rank\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Inverse_Rank ) ) .as ( [ Country , AverageofInverse_Rank ] ) | Group ( Country ) | With ( Panel ( 2 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"2\" : { \"layout\" : \"Cloud\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"value\" : [ \"AverageofInverse_Rank\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Inverse_Rank ) .as ( [ Country , Inverse_Rank ] ) | With ( Panel ( 2 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"2\" : { \"layout\" : \"Cloud\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"value\" : [ \"Inverse_Rank\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Inverse_Rank ) ) .as ( [ Country , AverageofInverse_Rank ] ) | Group ( Country ) | With ( Panel ( 2 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"2\" : { \"layout\" : \"Cloud\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"value\" : [ \"AverageofInverse_Rank\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Inverse_Rank ) .as ( [ Country , Inverse_Rank ] ) | With ( Panel ( 2 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"2\" : { \"layout\" : \"Cloud\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"value\" : [ \"Inverse_Rank\" ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 2 ) | SetPanelLabel ( \u0027Cloud Map\u0027 ) ;Panel ( 2 ) | Clone ( 3 ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Population_median_age_years ) , Average ( Inverse_Rank ) ) .as ( [ Country , AverageofPopulation_median_age_years , AverageofInverse_Rank ] ) | Group ( Country ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"AverageofPopulation_median_age_years\" ] , \"y\" : [ \"AverageofInverse_Rank\" ] , \"z\" : [ ] , \"series\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Population_median_age_years , Inverse_Rank ) .as ( [ Country , Population_median_age_years , Inverse_Rank ] ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"Population_median_age_years\" ] , \"y\" : [ \"Inverse_Rank\" ] , \"z\" : [ ] , \"series\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Population_median_age_years ) , Average ( Inverse_Rank ) , Average ( Health_Life_Expectancy ) ) .as ( [ Country , AverageofPopulation_median_age_years , AverageofInverse_Rank , AverageofHealth_Life_Expectancy ] ) | Group ( Country ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"AverageofPopulation_median_age_years\" ] , \"y\" : [ \"AverageofInverse_Rank\" ] , \"z\" : [ \"AverageofHealth_Life_Expectancy\" ] , \"series\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Population_median_age_years , Inverse_Rank , Health_Life_Expectancy ) .as ( [ Country , Population_median_age_years , Inverse_Rank , Health_Life_Expectancy ] ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"Population_median_age_years\" ] , \"y\" : [ \"Inverse_Rank\" ] , \"z\" : [ \"Health_Life_Expectancy\" ] , \"series\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Population_median_age_years ) , Average ( Inverse_Rank ) ) .as ( [ Country , AverageofPopulation_median_age_years , AverageofInverse_Rank ] ) | Group ( Country ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"AverageofPopulation_median_age_years\" ] , \"y\" : [ \"AverageofInverse_Rank\" ] , \"z\" : [ ] , \"series\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Population_median_age_years , Inverse_Rank ) .as ( [ Country , Population_median_age_years , Inverse_Rank ] ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"Population_median_age_years\" ] , \"y\" : [ \"Inverse_Rank\" ] , \"z\" : [ ] , \"series\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Population_median_age_years ) , Average ( Inverse_Rank ) , UniqueGroupConcat ( Region ) ) .as ( [ Country , AverageofPopulation_median_age_years , AverageofInverse_Rank , UniqueGroupConcatofRegion ] ) | Group ( Country ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"AverageofPopulation_median_age_years\" ] , \"y\" : [ \"AverageofInverse_Rank\" ] , \"z\" : [ ] , \"series\" : [ \"UniqueGroupConcatofRegion\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Population_median_age_years , Inverse_Rank , Region ) .as ( [ Country , Population_median_age_years , Inverse_Rank , Region ] ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"Population_median_age_years\" ] , \"y\" : [ \"Inverse_Rank\" ] , \"z\" : [ ] , \"series\" : [ \"Region\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 3 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"toggleLegend\" : true } } } ) ;Panel ( 3 ) | RetrievePanelOrnaments ( \"tools.shared.toggleLegend\" ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Population_median_age_years ) , Average ( Happiness_Rank ) , UniqueGroupConcat ( Region ) ) .as ( [ Country , AverageofPopulation_median_age_years , AverageofHappiness_Rank , UniqueGroupConcatofRegion ] ) | Group ( Country ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"AverageofPopulation_median_age_years\" ] , \"y\" : [ \"AverageofHappiness_Rank\" ] , \"z\" : [ ] , \"series\" : [ \"UniqueGroupConcatofRegion\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Population_median_age_years , Happiness_Rank , Region ) .as ( [ Country , Population_median_age_years , Happiness_Rank , Region ] ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"Population_median_age_years\" ] , \"y\" : [ \"Happiness_Rank\" ] , \"z\" : [ ] , \"series\" : [ \"Region\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 3 ) | SetPanelLabel ( \u0027Age vs Happiness\u0027 ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , latitude , longitude , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , latitude , longitude , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"latitude\" , \"longitude\" , \"Population_median_age_years\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Population_median_age_years ) , Average ( Happiness_Rank ) , UniqueGroupConcat ( Region ) ) .as ( [ Country , AverageofPopulation_median_age_years , AverageofHappiness_Rank , UniqueGroupConcatofRegion ] ) | Group ( Country ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"AverageofPopulation_median_age_years\" ] , \"y\" : [ \"AverageofHappiness_Rank\" ] , \"z\" : [ ] , \"series\" : [ \"UniqueGroupConcatofRegion\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Population_median_age_years , Happiness_Rank , Region ) .as ( [ Country , Population_median_age_years , Happiness_Rank , Region ] ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"Population_median_age_years\" ] , \"y\" : [ \"Happiness_Rank\" ] , \"z\" : [ ] , \"series\" : [ \"Region\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 3 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"toggleLegend\" : false } } } ) ;Panel ( 3 ) | RetrievePanelOrnaments ( \"tools.shared.toggleLegend\" ) ;Panel ( 3 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"toggleLegend\" : true } } } ) ;Panel ( 3 ) | RetrievePanelOrnaments ( \"tools.shared.toggleLegend\" ) ;Panel ( 3 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"toggleZoom\" : { \"toggleZoomX\" : \"No\" , \"toggleZoomY\" : \"Yes\" } } } } ) ;Panel ( 3 ) | RetrievePanelOrnaments ( \"tools.shared.toggleZoom\" ) ;Panel ( 3 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"toggleZoom\" : { \"toggleZoomX\" : \"No\" , \"toggleZoomY\" : \"No\" } } } } ) ;Panel ( 3 ) | RetrievePanelOrnaments ( \"tools.shared.toggleZoom\" ) ;Panel ( 3 ) | Clone ( 4 ) ;Panel ( 1 ) | SetPanelLabel ( \u0027Regional Happiness\u0027 ) ;Panel ( 0 ) | SetPanelLabel ( \u0027World_Map\u0027 ) ;ClosePanel ( 4 ) ;Panel ( 3 ) | Clone ( 5 ) ;Database ( PollutionDB ) | Select ( Country , Country__Exp_Pollution_Index ) .as ( [ Country , Exp_Pollution_Index ] ) | Merge ( ( Country , inner.join , Country ) ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Exp_Pollution_Index , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Exp_Pollution_Index , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ] ) | With ( Panel ( 5 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"5\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Exp_Pollution_Index\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Population_median_age_years\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" , \"latitude\" , \"longitude\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Population_median_age_years ) , Average ( Happiness_Rank ) , UniqueGroupConcat ( Region ) ) .as ( [ Country , AverageofPopulation_median_age_years , AverageofHappiness_Rank , UniqueGroupConcatofRegion ] ) | Group ( Country ) | With ( Panel ( 5 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"5\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"AverageofPopulation_median_age_years\" ] , \"y\" : [ \"AverageofHappiness_Rank\" ] , \"z\" : [ ] , \"series\" : [ \"UniqueGroupConcatofRegion\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Population_median_age_years , Happiness_Rank , Region ) .as ( [ Country , Population_median_age_years , Happiness_Rank , Region ] ) | With ( Panel ( 5 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"5\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"Population_median_age_years\" ] , \"y\" : [ \"Happiness_Rank\" ] , \"z\" : [ ] , \"series\" : [ \"Region\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Exp_Pollution_Index ) , Average ( Happiness_Rank ) , UniqueGroupConcat ( Region ) ) .as ( [ Country , AverageofExp_Pollution_Index , AverageofHappiness_Rank , UniqueGroupConcatofRegion ] ) | Group ( Country ) | With ( Panel ( 5 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"5\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"AverageofExp_Pollution_Index\" ] , \"y\" : [ \"AverageofHappiness_Rank\" ] , \"z\" : [ ] , \"series\" : [ \"UniqueGroupConcatofRegion\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Exp_Pollution_Index , Happiness_Rank , Region ) .as ( [ Country , Exp_Pollution_Index , Happiness_Rank , Region ] ) | With ( Panel ( 5 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"5\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"Exp_Pollution_Index\" ] , \"y\" : [ \"Happiness_Rank\" ] , \"z\" : [ ] , \"series\" : [ \"Region\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 5 ) | SetPanelLabel ( \u0027Pollution vs Rank\u0027 ) ;Panel ( 5 ) | Clone ( 6 ) ;Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Exp_Pollution_Index , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Exp_Pollution_Index , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ] ) | With ( Panel ( 6 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"6\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Exp_Pollution_Index\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Population_median_age_years\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" , \"latitude\" , \"longitude\" ] } } } ) | Collect ( 500 ) ;Panel ( 6 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"standard\"}\u003c/encode\u003e\" ) ;RunAssociatedLearning ( numRules \u003d [ 100 ] , minSupport \u003d [ 10 ] , maxSupport \u003d [ 90 ] , confPer \u003d [ 90 ] , attributes \u003d [ \"Exp_Pollution_Index\" , \"Health_Life_Expectancy\" , \"Population_median_age_years\" ] , panel \u003d [ 6 ] ) ;Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Exp_Pollution_Index , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Exp_Pollution_Index , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Population_median_age_years , Region , Standard_Error , Trust_Government_Corruption , Year , latitude , longitude ] ) | With ( Panel ( 6 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"6\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Exp_Pollution_Index\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Population_median_age_years\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" , \"latitude\" , \"longitude\" ] } } } ) | Collect ( 500 ) ;Panel ( 6 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"standard\"}\u003c/encode\u003e\" ) ;RunMatrixRegression ( yColumn \u003d [ Happiness_Score ] , xColumns \u003d [ \"Economy_GDP_per_Capita\" , \"Exp_Pollution_Index\" , \"Health_Life_Expectancy\" , \"Population_median_age_years\" ] , panel \u003d [ 6 ] ) ;RunSimilarity ( instance \u003d [ Happiness_Score ] , attributes \u003d [ \"Economy_GDP_per_Capita\" , \"Exp_Pollution_Index\" , \"Population_median_age_years\" ] ) ;RunSimilarity ( instance \u003d [ Happiness_Score ] , attributes \u003d [ \"Economy_GDP_per_Capita\" , \"Exp_Pollution_Index\" , \"Population_median_age_years\" ] ) ;ClosePanel ( 6 ) ;ClosePanel ( 3 ) ;Panel(0)|AddPanelOrnaments({\"showMenu\":true});Panel(0)|RetrievePanelOrnaments(\"showMenu\");Panel(1)|AddPanelOrnaments({\"showMenu\":true});Panel(1)|RetrievePanelOrnaments(\"showMenu\");Panel(2)|AddPanelOrnaments({\"showMenu\":true});Panel(2)|RetrievePanelOrnaments(\"showMenu\");Panel(5)|AddPanelOrnaments({\"showMenu\":true});Panel(5)|RetrievePanelOrnaments(\"showMenu\");"
}