{
  "layout": "Scatter",
  "image": "image.png",
  "rdbmsId": "2dc67b7b-a8f2-49a9-9df5-c2e842d018b7",
  "hidden": false,
  "engine": "happyCountryDB",
  "insightName": "Fertility and Happiness",
  "recipe": "AddPanel ( 0 ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eUnfilterFrame(\u003cSelectedColumn\u003e);\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : true , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif(IsEmpty(\u003cSelectedValues\u003e), UnfilterFrame(\u003cSelectedColumn\u003e), SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : true , \"default\" : true , \"disabled\" : false } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;Panel ( 0 ) | SetPanelView ( \"federate-view\" , \"\u003cencode\u003e{\"core_engine\":\"happyCountryDB\"}\u003c/encode\u003e\" ) ;CreateFrame ( grid ) .as ( [ \u0027FRAME112450\u0027 ] ) ;Database ( happyCountryDB ) | Select ( Country , Country__Dystopia_Residual , Country__Economy_GDP_per_Capita , Country__Family , Country__Freedom , Country__Generosity , Country__Happiness_Rank , Country__Happiness_Score , Country__Health_Life_Expectancy , Country__Region , Country__Standard_Error , Country__Trust_Government_Corruption , Country__Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Import ( ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;\u003cj\u003e\u003cencode\u003esynchronizeGridToRDataTable(\"FRAME112450\")\u003c/encode\u003e\u003c/j\u003e ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;DropRows ( Filter ( Year \u003d\u003d \"2015\" ) ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Select ( ( ( 157 - Happiness_Rank ) + 1 ) , Happiness_Rank ) .as ( [ Inverse_Rank , Happiness_Rank ] ) | Merge ( ( Happiness_Rank , inner.join , Happiness_Rank ) ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year , Inverse_Rank ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year , Inverse_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" , \"Inverse_Rank\" ] } } } ) | Collect ( 500 ) ;Database ( birthRate ) | Select ( COUNTRY , COUNTRY__TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN ) .as ( [ COUNTRY , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN ] ) | Merge ( ( Country , inner.join , COUNTRY ) ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN , Trust_Government_Corruption , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;SplitColumns ( columns \u003d [ \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN\" ] , delimiter \u003d [ \"_\" ] , regex \u003d [ \"Regex\" ] ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_1 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_2 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_3 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_4 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_5 , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_1 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_2 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_3 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_4 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_5 , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_1\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_2\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_3\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_4\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_5\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;RenameColumn ( TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_1 , \"Fertility\" ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN , Fertility , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_2 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_3 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_4 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_5 , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN , Fertility , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_2 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_3 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_4 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_5 , Trust_Government_Corruption , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN\" , \"Fertility\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_2\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_3\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_4\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_5\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Fertility , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_2 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_3 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_4 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_5 , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Fertility , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_2 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_3 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_4 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_5 , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Fertility\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_2\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_3\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_4\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_5\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Dystopia_Residual ) , Average ( Economy_GDP_per_Capita ) , Average ( Family ) , UniqueGroupConcat ( Fertility ) ) .as ( [ Country , AverageofDystopia_Residual , AverageofEconomy_GDP_per_Capita , AverageofFamily , UniqueGroupConcatofFertility ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"AverageofDystopia_Residual\" ] , \"y\" : [ \"AverageofEconomy_GDP_per_Capita\" ] , \"z\" : [ \"AverageofFamily\" ] , \"series\" : [ \"UniqueGroupConcatofFertility\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Fertility ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Fertility ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"Dystopia_Residual\" ] , \"y\" : [ \"Economy_GDP_per_Capita\" ] , \"z\" : [ \"Family\" ] , \"series\" : [ \"Fertility\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Fertility ) , Average ( Happiness_Rank ) ) .as ( [ Country , AverageofFertility , AverageofHappiness_Rank ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"AverageofFertility\" ] , \"y\" : [ \"AverageofHappiness_Rank\" ] , \"z\" : [ ] , \"series\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Fertility , Happiness_Rank ) .as ( [ Country , Fertility , Happiness_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"Fertility\" ] , \"y\" : [ \"Happiness_Rank\" ] , \"z\" : [ ] , \"series\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Happiness_Rank ) , Average ( Fertility ) ) .as ( [ Country , AverageofHappiness_Rank , AverageofFertility ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"AverageofHappiness_Rank\" ] , \"y\" : [ \"AverageofFertility\" ] , \"z\" : [ ] , \"series\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Happiness_Rank , Fertility ) .as ( [ Country , Happiness_Rank , Fertility ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"z\" : [ ] , \"series\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Happiness_Rank ) , Average ( Fertility ) , UniqueGroupConcat ( Region ) ) .as ( [ Country , AverageofHappiness_Rank , AverageofFertility , UniqueGroupConcatofRegion ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"AverageofHappiness_Rank\" ] , \"y\" : [ \"AverageofFertility\" ] , \"z\" : [ ] , \"series\" : [ \"UniqueGroupConcatofRegion\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Happiness_Rank , Fertility , Region ) .as ( [ Country , Happiness_Rank , Fertility , Region ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"z\" : [ ] , \"series\" : [ \"Region\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"toggleLegend\" : true } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.toggleLegend\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : false } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : false } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;if ( IsEmpty ( [ ] ) , UnfilterFrame ( Country ) , SetFrameFilter ( Country \u003d\u003d [ ] ) ) ;Frame ( ) | Select ( Region , Happiness_Rank , Fertility , Country ) .as ( [ Region , Happiness_Rank , Fertility , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"label\" : [ \"Country\" ] } } } ) | Collect ( 500 ) ;if ( IsEmpty ( [ ] ) , UnfilterFrame ( Country ) , SetFrameFilter ( Country \u003d\u003d [ ] ) ) ;Frame ( ) | Select ( Region , Happiness_Rank , Fertility , Country ) .as ( [ Region , Happiness_Rank , Fertility , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"label\" : [ \"Country\" ] } } } ) | Collect ( 500 ) ;if ( IsEmpty ( [ \"Afghanistan\" , \"Angola\" , \"Benin\" , \"Burkina_Faso\" , \"Burundi\" , \"Cameroon\" , \"Chad\" , \"Ethiopia\" , \"Gabon\" , \"Guinea\" , \"Liberia\" , \"Malawi\" , \"Mali\" , \"Niger\" , \"Nigeria\" , \"Senegal\" , \"Sierra_Leone\" , \"Somalia\" , \"South_Sudan\" , \"Tanzania\" , \"Togo\" , \"Uganda\" , \"Zambia\" ] ) , UnfilterFrame ( Country ) , SetFrameFilter ( Country \u003d\u003d [ \"Afghanistan\" , \"Angola\" , \"Benin\" , \"Burkina_Faso\" , \"Burundi\" , \"Cameroon\" , \"Chad\" , \"Ethiopia\" , \"Gabon\" , \"Guinea\" , \"Liberia\" , \"Malawi\" , \"Mali\" , \"Niger\" , \"Nigeria\" , \"Senegal\" , \"Sierra_Leone\" , \"Somalia\" , \"South_Sudan\" , \"Tanzania\" , \"Togo\" , \"Uganda\" , \"Zambia\" ] ) ) ;Frame ( ) | Select ( Region , Happiness_Rank , Fertility , Country ) .as ( [ Region , Happiness_Rank , Fertility , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"label\" : [ \"Country\" ] } } } ) | Collect ( 500 ) ;UnfilterFrame ( Country ) ;Frame ( ) | Select ( Region , Happiness_Rank , Fertility , Country ) .as ( [ Region , Happiness_Rank , Fertility , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"label\" : [ \"Country\" ] } } } ) | Collect ( 500 ) ;if ( IsEmpty ( [ \"Afghanistan\" , \"Angola\" , \"Benin\" , \"Burkina_Faso\" , \"Burundi\" , \"Cameroon\" , \"Chad\" , \"Ethiopia\" , \"Gabon\" , \"Guinea\" , \"Liberia\" , \"Malawi\" , \"Mali\" , \"Niger\" , \"Nigeria\" , \"Senegal\" , \"Sierra_Leone\" , \"Somalia\" , \"South_Sudan\" , \"Tanzania\" , \"Togo\" , \"Uganda\" , \"Zambia\" ] ) , UnfilterFrame ( Country ) , SetFrameFilter ( Country \u003d\u003d [ \"Afghanistan\" , \"Angola\" , \"Benin\" , \"Burkina_Faso\" , \"Burundi\" , \"Cameroon\" , \"Chad\" , \"Ethiopia\" , \"Gabon\" , \"Guinea\" , \"Liberia\" , \"Malawi\" , \"Mali\" , \"Niger\" , \"Nigeria\" , \"Senegal\" , \"Sierra_Leone\" , \"Somalia\" , \"South_Sudan\" , \"Tanzania\" , \"Togo\" , \"Uganda\" , \"Zambia\" ] ) ) ;Frame ( ) | Select ( Region , Happiness_Rank , Fertility , Country ) .as ( [ Region , Happiness_Rank , Fertility , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"label\" : [ \"Country\" ] } } } ) | Collect ( 500 ) ;if ( IsEmpty ( [ ] ) , UnfilterFrame ( Country ) , SetFrameFilter ( Country \u003d\u003d [ ] ) ) ;Frame ( ) | Select ( Region , Happiness_Rank , Fertility , Country ) .as ( [ Region , Happiness_Rank , Fertility , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"label\" : [ \"Country\" ] } } } ) | Collect ( 500 ) ;if ( IsEmpty ( [ \"Afghanistan\" , \"Angola\" , \"Benin\" , \"Burkina_Faso\" , \"Burundi\" , \"Cameroon\" , \"Chad\" , \"Ethiopia\" , \"Gabon\" , \"Guinea\" , \"Liberia\" , \"Malawi\" , \"Mali\" , \"Niger\" , \"Nigeria\" , \"Senegal\" , \"Sierra_Leone\" , \"Somalia\" , \"South_Sudan\" , \"Tanzania\" , \"Togo\" , \"Uganda\" , \"Zambia\" ] ) , UnfilterFrame ( Country ) , SetFrameFilter ( Country \u003d\u003d [ \"Afghanistan\" , \"Angola\" , \"Benin\" , \"Burkina_Faso\" , \"Burundi\" , \"Cameroon\" , \"Chad\" , \"Ethiopia\" , \"Gabon\" , \"Guinea\" , \"Liberia\" , \"Malawi\" , \"Mali\" , \"Niger\" , \"Nigeria\" , \"Senegal\" , \"Sierra_Leone\" , \"Somalia\" , \"South_Sudan\" , \"Tanzania\" , \"Togo\" , \"Uganda\" , \"Zambia\" ] ) ) ;Frame ( ) | Select ( Region , Happiness_Rank , Fertility , Country ) .as ( [ Region , Happiness_Rank , Fertility , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"label\" : [ \"Country\" ] } } } ) | Collect ( 500 ) ;if ( IsEmpty ( [ ] ) , UnfilterFrame ( Country ) , SetFrameFilter ( Country \u003d\u003d [ ] ) ) ;Frame ( ) | Select ( Region , Happiness_Rank , Fertility , Country ) .as ( [ Region , Happiness_Rank , Fertility , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"label\" : [ \"Country\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"disabledVisuals\" : [ \"Grid\" ] , \"default\" : true , \"query\" : \"UnfilterFrame(\u003cSelectedColumn\u003e);\" , \"options\" : { } , \"refresh\" : true , \"disabled\" : true , \"panel\" : \"\" } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Show_Country\" : [ { \"panel\" : 0 , \"query\" : \"\u003cencode\u003eif ( ( HasDuplicates ( Country , latitude , longitude ) ) , ( Select ( Country , latitude , longitude , Average ( Fertility_Rate ) ) .as ( [ Country , latitude , longitude , AverageofFertility_Rate ] ) | Group ( Country , latitude , longitude ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \\\"0\\\" : { \\\"layout\\\" : \\\"Map\\\" , \\\"alignment\\\" : { \\\"label\\\" : [ \\\"Country\\\" ] , \\\"latitude\\\" : [ \\\"latitude\\\" ] , \\\"longitude\\\" : [ \\\"longitude\\\" ] , \\\"size\\\" : [ \\\"AverageofFertility_Rate\\\" ] , \\\"tooltip\\\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , latitude , longitude , Fertility_Rate ) .as ( [ Country , latitude , longitude , Fertility_Rate ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \\\"0\\\" : { \\\"layout\\\" : \\\"Map\\\" , \\\"alignment\\\" : { \\\"label\\\" : [ \\\"Country\\\" ] , \\\"latitude\\\" : [ \\\"latitude\\\" ] , \\\"longitude\\\" : [ \\\"longitude\\\" ] , \\\"size\\\" : [ \\\"Fertility_Rate\\\" ] , \\\"tooltip\\\" : [ ] } } } ) | Collect ( 500 ) ) ) ;\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"disabledVisuals\" : [ ] } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Show_Country\" : [ { \"panel\" : 0 , \"query\" : \"\u003cencode\u003eif ( ( HasDuplicates ( Country , latitude , longitude ) ) , ( Select ( Country , latitude , longitude , Average ( Fertility_Rate ) ) .as ( [ Country , latitude , longitude , AverageofFertility_Rate ] ) | Group ( Country , latitude , longitude ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \\\"0\\\" : { \\\"layout\\\" : \\\"Map\\\" , \\\"alignment\\\" : { \\\"label\\\" : [ \\\"Country\\\" ] , \\\"latitude\\\" : [ \\\"latitude\\\" ] , \\\"longitude\\\" : [ \\\"longitude\\\" ] , \\\"size\\\" : [ \\\"AverageofFertility_Rate\\\" ] , \\\"tooltip\\\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , latitude , longitude , Fertility_Rate ) .as ( [ Country , latitude , longitude , Fertility_Rate ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \\\"0\\\" : { \\\"layout\\\" : \\\"Map\\\" , \\\"alignment\\\" : { \\\"label\\\" : [ \\\"Country\\\" ] , \\\"latitude\\\" : [ \\\"latitude\\\" ] , \\\"longitude\\\" : [ \\\"longitude\\\" ] , \\\"size\\\" : [ \\\"Fertility_Rate\\\" ] , \\\"tooltip\\\" : [ ] } } } ) | Collect ( 500 ) ) ) ;\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"disabledVisuals\" : [ ] } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : false } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;if ( IsEmpty ( [ \"Nigeria\" , \"Somalia\" , \"Zambia\" ] ) , UnfilterFrame ( Country ) , SetFrameFilter ( Country \u003d\u003d [ \"Nigeria\" , \"Somalia\" , \"Zambia\" ] ) ) ;Frame ( ) | Select ( Region , Happiness_Rank , Fertility , Country ) .as ( [ Region , Happiness_Rank , Fertility , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"label\" : [ \"Country\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Country , latitude , longitude ) ) , ( Select ( Country , latitude , longitude , Average ( Fertility_Rate ) ) .as ( [ Country , latitude , longitude , AverageofFertility_Rate ] ) | Group ( Country , latitude , longitude ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"latitude\" ] , \"longitude\" : [ \"longitude\" ] , \"size\" : [ \"AverageofFertility_Rate\" ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , latitude , longitude , Fertility_Rate ) .as ( [ Country , latitude , longitude , Fertility_Rate ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Map\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"latitude\" : [ \"latitude\" ] , \"longitude\" : [ \"longitude\" ] , \"size\" : [ \"Fertility_Rate\" ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( IsEmpty ( [ ] ) , UnfilterFrame ( Country ) , SetFrameFilter ( Country \u003d\u003d [ ] ) ) ;Frame ( ) | Select ( Region , Happiness_Rank , Fertility , Country ) .as ( [ Region , Happiness_Rank , Fertility , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"label\" : [ \"Country\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | RemovePanelEvents ( \"onSingleClick.Show_Country\" ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Show_Country\" : [ { \"panel\" : 0 , \"query\" : \"\u003cencode\u003eRetrievePanelOrnaments ( \\\"tools.shared.displayValues\\\" ) ;\\n{\\\"path\\\":\\\"tools.shared.displayValues\\\", \\\"panelId\\\":\\\"0\\\", \\\"ornaments\\\":true}\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"disabledVisuals\" : [ ] } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"disabledVisuals\" : [ \"Grid\" ] , \"default\" : true , \"query\" : \"UnfilterFrame(\u003cSelectedColumn\u003e);\" , \"options\" : { } , \"refresh\" : true , \"disabled\" : false , \"panel\" : \"\" } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"disabledVisuals\" : [ \"Grid\" ] , \"default\" : true , \"query\" : \"UnfilterFrame(\u003cSelectedColumn\u003e);\" , \"options\" : { } , \"refresh\" : true , \"disabled\" : true , \"panel\" : \"\" } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"disabledVisuals\" : [ \"Grid\" ] , \"default\" : true , \"query\" : \"UnfilterFrame(\u003cSelectedColumn\u003e);\" , \"options\" : { } , \"refresh\" : true , \"disabled\" : false , \"panel\" : \"\" } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"disabledVisuals\" : [ \"Grid\" ] , \"default\" : true , \"query\" : \"UnfilterFrame(\u003cSelectedColumn\u003e);\" , \"options\" : { } , \"refresh\" : true , \"disabled\" : true , \"panel\" : \"\" } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | RemovePanelEvents ( \"onSingleClick.Show_Country\" ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Show_Country\" : [ { \"panel\" : 0 , \"query\" : \"\u003cencode\u003eRetrievePanelOrnaments ( \\\"tools.shared.displayValues\\\" ) ;\\n{\\\"path\\\":\\\"tools.shared.displayValues\\\", \\\"panelId\\\":\\\"0\\\", \\\"ornaments\\\":true}\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"disabledVisuals\" : [ ] } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"disabledVisuals\" : [ \"Grid\" ] , \"default\" : true , \"query\" : \"UnfilterFrame(\u003cSelectedColumn\u003e);\" , \"options\" : { } , \"refresh\" : true , \"disabled\" : false , \"panel\" : \"\" } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"disabledVisuals\" : [ \"Grid\" ] , \"default\" : true , \"query\" : \"UnfilterFrame(\u003cSelectedColumn\u003e);\" , \"options\" : { } , \"refresh\" : true , \"disabled\" : true , \"panel\" : \"\" } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onDoubleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eUnfilterFrame(\u003cSelectedColumn\u003e);\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : true , \"disabledVisuals\" : [ \"Grid\" ] } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"disabledVisuals\" : [ \"Grid\" ] , \"default\" : true , \"query\" : \"UnfilterFrame(\u003cSelectedColumn\u003e);\" , \"options\" : { } , \"refresh\" : true , \"disabled\" : false , \"panel\" : \"\" } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"disabledVisuals\" : [ \"Grid\" ] , \"default\" : true , \"query\" : \"UnfilterFrame(\u003cSelectedColumn\u003e);\" , \"options\" : { } , \"refresh\" : true , \"disabled\" : true , \"panel\" : \"\" } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"disabledVisuals\" : [ \"Grid\" ] , \"default\" : true , \"query\" : \"UnfilterFrame(\u003cSelectedColumn\u003e);\" , \"options\" : { } , \"refresh\" : true , \"disabled\" : false , \"panel\" : \"\" } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"disabledVisuals\" : [ \"Grid\" ] , \"default\" : true , \"query\" : \"UnfilterFrame(\u003cSelectedColumn\u003e);\" , \"options\" : { } , \"refresh\" : true , \"disabled\" : true , \"panel\" : \"\" } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : false } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;if ( IsEmpty ( [ \"Kyrgyzstan\" , \"Jordan\" , \"Philippines\" ] ) , UnfilterFrame ( Country ) , SetFrameFilter ( Country \u003d\u003d [ \"Kyrgyzstan\" , \"Jordan\" , \"Philippines\" ] ) ) ;Frame ( ) | Select ( Region , Happiness_Rank , Fertility , Country ) .as ( [ Region , Happiness_Rank , Fertility , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"label\" : [ \"Country\" ] } } } ) | Collect ( 500 ) ;if ( IsEmpty ( [ ] ) , UnfilterFrame ( Country ) , SetFrameFilter ( Country \u003d\u003d [ ] ) ) ;Frame ( ) | Select ( Region , Happiness_Rank , Fertility , Country ) .as ( [ Region , Happiness_Rank , Fertility , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"label\" : [ \"Country\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | SetPanelLabel ( \u0027Fertility and Happiness\u0027 ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Fertility , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_2 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_3 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_4 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_5 , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Fertility , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_2 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_3 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_4 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_5 , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Fertility\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_2\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_3\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_4\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_5\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Happiness_Rank ) , Average ( Fertility ) , UniqueGroupConcat ( Region ) ) .as ( [ Country , AverageofHappiness_Rank , AverageofFertility , UniqueGroupConcatofRegion ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"AverageofHappiness_Rank\" ] , \"y\" : [ \"AverageofFertility\" ] , \"z\" : [ ] , \"series\" : [ \"UniqueGroupConcatofRegion\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Happiness_Rank , Fertility , Region ) .as ( [ Country , Happiness_Rank , Fertility , Region ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"z\" : [ ] , \"series\" : [ \"Region\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( IsEmpty ( [ \"Afghanistan\" , \"Angola\" , \"Benin\" , \"Burkina_Faso\" , \"Burundi\" , \"Chad\" , \"Gabon\" , \"Guinea\" , \"Liberia\" , \"Madagascar\" , \"Malawi\" , \"Mali\" , \"Niger\" , \"Senegal\" , \"South_Sudan\" , \"Tanzania\" , \"Togo\" , \"Uganda\" , \"Zimbabwe\" ] ) , UnfilterFrame ( Country ) , SetFrameFilter ( Country \u003d\u003d [ \"Afghanistan\" , \"Angola\" , \"Benin\" , \"Burkina_Faso\" , \"Burundi\" , \"Chad\" , \"Gabon\" , \"Guinea\" , \"Liberia\" , \"Madagascar\" , \"Malawi\" , \"Mali\" , \"Niger\" , \"Senegal\" , \"South_Sudan\" , \"Tanzania\" , \"Togo\" , \"Uganda\" , \"Zimbabwe\" ] ) ) ;Frame ( ) | Select ( Region , Happiness_Rank , Fertility , Country ) .as ( [ Region , Happiness_Rank , Fertility , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"label\" : [ \"Country\" ] } } } ) | Collect ( 500 ) ;if ( IsEmpty ( [ ] ) , UnfilterFrame ( Country ) , SetFrameFilter ( Country \u003d\u003d [ ] ) ) ;Frame ( ) | Select ( Region , Happiness_Rank , Fertility , Country ) .as ( [ Region , Happiness_Rank , Fertility , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"label\" : [ \"Country\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"showMenu\" : true } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"showMenu\" ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN , Fertility , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_2 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_3 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_4 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_5 , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN , Fertility , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_2 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_3 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_4 , TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_5 , Trust_Government_Corruption , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN\" , \"Fertility\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_2\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_3\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_4\" , \"TOTAL_FERTILITY_RATE_CHILDREN_BORN_WOMAN_5\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Happiness_Rank ) , Average ( Fertility ) , UniqueGroupConcat ( Region ) ) .as ( [ Country , AverageofHappiness_Rank , AverageofFertility , UniqueGroupConcatofRegion ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"AverageofHappiness_Rank\" ] , \"y\" : [ \"AverageofFertility\" ] , \"z\" : [ ] , \"series\" : [ \"UniqueGroupConcatofRegion\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Happiness_Rank , Fertility , Region ) .as ( [ Country , Happiness_Rank , Fertility , Region ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Scatter\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"x\" : [ \"Happiness_Rank\" ] , \"y\" : [ \"Fertility\" ] , \"z\" : [ ] , \"series\" : [ \"Region\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel(0)|AddPanelOrnaments({\"showMenu\":true});Panel(0)|RetrievePanelOrnaments(\"showMenu\");"
}