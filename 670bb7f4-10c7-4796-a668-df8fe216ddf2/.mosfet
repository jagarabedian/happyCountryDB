{
  "layout": "Column",
  "image": "image.png",
  "rdbmsId": "670bb7f4-10c7-4796-a668-df8fe216ddf2",
  "hidden": false,
  "engine": "happyCountryDB",
  "insightName": "Region_Scores_GDP",
  "recipe": "AddPanel ( 0 ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eUnfilterFrame(\u003cSelectedColumn\u003e);\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : true , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif(IsEmpty(\u003cSelectedValues\u003e), UnfilterFrame(\u003cSelectedColumn\u003e), SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : true , \"default\" : true , \"disabled\" : false } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;Panel ( 0 ) | SetPanelView ( \"federate-view\" , \"\u003cencode\u003e{\"core_engine\":\"happyCountryDB\"}\u003c/encode\u003e\" ) ;CreateFrame ( grid ) .as ( [ \u0027FRAME370944\u0027 ] ) ;Database ( happyCountryDB ) | Select ( Country , Country__Dystopia_Residual , Country__Economy_GDP_per_Capita , Country__Family , Country__Freedom , Country__Generosity , Country__Happiness_Rank , Country__Happiness_Score , Country__Health_Life_Expectancy , Country__Region , Country__Standard_Error , Country__Trust_Government_Corruption , Country__Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Import ( ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;\u003cj\u003e\u003cencode\u003esynchronizeGridToRDataTable(\"FRAME370944\")\u003c/encode\u003e\u003c/j\u003e ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;DropRows ( Filter ( Year \u003d\u003d \"2015\" ) ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;DropColumn ( \"Dystopia_Residual\" ) ;Frame ( ) | Select ( Country , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;DropColumn ( \"Economy_GDP_per_Capita\" ) ;Frame ( ) | Select ( Country , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;DropColumn ( \"Freedom\" ) ;Frame ( ) | Select ( Country , Family , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Family , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Family\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;DropColumn ( \"Generosity\" ) ;Frame ( ) | Select ( Country , Family , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Family , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Family\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;DropColumn ( \"Health_Life_Expectancy\" ) ;Frame ( ) | Select ( Country , Family , Happiness_Rank , Happiness_Score , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Family , Happiness_Rank , Happiness_Score , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Family\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;DropColumn ( \"Trust_Government_Corruption\" ) ;Frame ( ) | Select ( Country , Family , Happiness_Rank , Happiness_Score , Region , Standard_Error , Year ) .as ( [ Country , Family , Happiness_Rank , Happiness_Score , Region , Standard_Error , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Family\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Standard_Error\" , \"Year\" ] } } } ) | Collect ( 500 ) ;DropColumn ( \"Standard_Error\" ) ;Frame ( ) | Select ( Country , Family , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ Country , Family , Happiness_Rank , Happiness_Score , Region , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Family\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;DropColumn ( \"Family\" ) ;Frame ( ) | Select ( Country , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ Country , Happiness_Rank , Happiness_Score , Region , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Database ( GDPPC ) | Select ( Country_Name , Country_Name__A2010 ) .as ( [ Country_Name , A2010 ] ) | Merge ( ( Country , inner.join , Country_Name ) ) ;Frame ( ) | Select ( A2010 , Country , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ A2010 , Country , Happiness_Rank , Happiness_Score , Region , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2010\" , \"Country\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Database ( GDPPC ) | Select ( Country_Name , Country_Name__A2013 ) .as ( [ Country_Name , A2013 ] ) | Merge ( ( Country , inner.join , Country_Name ) ) ;Frame ( ) | Select ( A2010 , A2013 , Country , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ A2010 , A2013 , Country , Happiness_Rank , Happiness_Score , Region , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2010\" , \"A2013\" , \"Country\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Database ( GDPPC ) | Select ( Country_Name , Country_Name__A2014 ) .as ( [ Country_Name , A2014 ] ) | Merge ( ( Country , inner.join , Country_Name ) ) ;Frame ( ) | Select ( A2010 , A2013 , A2014 , Country , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ A2010 , A2013 , A2014 , Country , Happiness_Rank , Happiness_Score , Region , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2010\" , \"A2013\" , \"A2014\" , \"Country\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Database ( GDPPC ) | Select ( Country_Name , Country_Name__A2015 ) .as ( [ Country_Name , A2015 ] ) | Merge ( ( Country , inner.join , Country_Name ) ) ;Frame ( ) | Select ( A2010 , A2013 , A2014 , A2015 , Country , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ A2010 , A2013 , A2014 , A2015 , Country , Happiness_Rank , Happiness_Score , Region , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2010\" , \"A2013\" , \"A2014\" , \"A2015\" , \"Country\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Database ( GDPPC ) | Select ( Country_Name , Country_Name__A2016 ) .as ( [ Country_Name , A2016 ] ) | Merge ( ( Country , inner.join , Country_Name ) ) ;Frame ( ) | Select ( A2010 , A2013 , A2014 , A2015 , A2016 , Country , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ A2010 , A2013 , A2014 , A2015 , A2016 , Country , Happiness_Rank , Happiness_Score , Region , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2010\" , \"A2013\" , \"A2014\" , \"A2015\" , \"A2016\" , \"Country\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;\u003cj\u003e\u003cencode\u003esynchronizeGridToRDataTable(\"FRAME370944\")\u003c/encode\u003e\u003c/j\u003e ;Frame ( ) | Select ( A2010 , A2013 , A2014 , A2015 , A2016 , Country , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ A2010 , A2013 , A2014 , A2015 , A2016 , Country , Happiness_Rank , Happiness_Score , Region , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2010\" , \"A2013\" , \"A2014\" , \"A2015\" , \"A2016\" , \"Country\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;DropColumn ( \"A2010\" ) ;Frame ( ) | Select ( A2013 , A2014 , A2015 , A2016 , Country , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ A2013 , A2014 , A2015 , A2016 , Country , Happiness_Rank , Happiness_Score , Region , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2013\" , \"A2014\" , \"A2015\" , \"A2016\" , \"Country\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;RenameColumn ( A2013 , \"GDP_13\" ) ;Frame ( ) | Select ( GDP_13 , A2014 , A2015 , A2016 , Country , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ GDP_13 , A2014 , A2015 , A2016 , Country , Happiness_Rank , Happiness_Score , Region , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"GDP_13\" , \"A2014\" , \"A2015\" , \"A2016\" , \"Country\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( A2014 , A2015 , A2016 , Country , GDP_13 , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ A2014 , A2015 , A2016 , Country , GDP_13 , Happiness_Rank , Happiness_Score , Region , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2014\" , \"A2015\" , \"A2016\" , \"Country\" , \"GDP_13\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;RenameColumn ( A2014 , \"GDP_14\" ) ;Frame ( ) | Select ( GDP_14 , A2015 , A2016 , Country , GDP_13 , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ GDP_14 , A2015 , A2016 , Country , GDP_13 , Happiness_Rank , Happiness_Score , Region , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"GDP_14\" , \"A2015\" , \"A2016\" , \"Country\" , \"GDP_13\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( A2015 , A2016 , Country , GDP_13 , GDP_14 , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ A2015 , A2016 , Country , GDP_13 , GDP_14 , Happiness_Rank , Happiness_Score , Region , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2015\" , \"A2016\" , \"Country\" , \"GDP_13\" , \"GDP_14\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;RenameColumn ( A2015 , \"GDP_15\" ) ;Frame ( ) | Select ( GDP_15 , A2016 , Country , GDP_13 , GDP_14 , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ GDP_15 , A2016 , Country , GDP_13 , GDP_14 , Happiness_Rank , Happiness_Score , Region , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"GDP_15\" , \"A2016\" , \"Country\" , \"GDP_13\" , \"GDP_14\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( A2016 , Country , GDP_13 , GDP_14 , GDP_15 , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ A2016 , Country , GDP_13 , GDP_14 , GDP_15 , Happiness_Rank , Happiness_Score , Region , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2016\" , \"Country\" , \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;RenameColumn ( A2016 , \"GDP_16\" ) ;Frame ( ) | Select ( GDP_16 , Country , GDP_13 , GDP_14 , GDP_15 , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ GDP_16 , Country , GDP_13 , GDP_14 , GDP_15 , Happiness_Rank , Happiness_Score , Region , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"GDP_16\" , \"Country\" , \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Country , GDP_13 , GDP_14 , GDP_15 , GDP_16 , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ Country , GDP_13 , GDP_14 , GDP_15 , GDP_16 , Happiness_Rank , Happiness_Score , Region , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"GDP_16\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) , Average ( Happiness_Rank ) , Average ( Happiness_Score ) , Count ( Region ) , Count ( Year ) ) .as ( [ Country , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 , AverageofHappiness_Rank , AverageofHappiness_Score , CountofRegion , CountofYear ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" , \"AverageofHappiness_Rank\" , \"AverageofHappiness_Score\" , \"CountofRegion\" , \"CountofYear\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , GDP_13 , GDP_14 , GDP_15 , GDP_16 , Happiness_Rank , Happiness_Score , Count ( Region ) , Count ( Year ) ) .as ( [ Country , GDP_13 , GDP_14 , GDP_15 , GDP_16 , Happiness_Rank , Happiness_Score , CountofRegion , CountofYear ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"GDP_16\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"CountofRegion\" , \"CountofYear\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) ) .as ( [ Region , AverageofGDP_13 ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 ) .as ( [ Region , GDP_13 ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 ) .as ( [ Region , GDP_13 , GDP_14 ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" , \"GDP_15\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"GDP_16\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"rotateAxis\" : true } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.rotateAxis\" ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Score ) .as ( [ Region , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 0 ) | SetPanelSort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"desc\" ] ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | SetPanelSort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"asc\" ] ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"top\" , \"rotate\" : \"0\" , \"align\" : \"right\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"12\" , \"fontWeight\" : \"normal\" } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"right\" , \"rotate\" : \"0\" , \"align\" : \"right\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"12\" , \"fontWeight\" : \"normal\" } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"right\" , \"rotate\" : \"0\" , \"align\" : \"center\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"12\" , \"fontWeight\" : \"normal\" } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"right\" , \"rotate\" : \"0\" , \"align\" : \"left\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"12\" , \"fontWeight\" : \"normal\" } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"right\" , \"rotate\" : \"0\" , \"align\" : \"left\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"15\" , \"fontWeight\" : \"bold\" } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | SetPanelLabel ( \u0027Region_Scores_GDP\u0027 ) ;Panel ( 0 ) | SetPanelLabel ( \u0027Region_Scores\u0027 ) ;\u003cj\u003e\u003cencode\u003esynchronizeGridToRDataTable(\"FRAME370944\")\u003c/encode\u003e\u003c/j\u003e ;Frame ( ) | Select ( Country , GDP_13 , GDP_14 , GDP_15 , GDP_16 , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ Country , GDP_13 , GDP_14 , GDP_15 , GDP_16 , Happiness_Rank , Happiness_Score , Region , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"GDP_16\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Score ) .as ( [ Region , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 0 ) | Clone ( 1 ) ;if ( IsEmpty ( [ \"Latin_America_and_Caribbean\" , \"Western_Europe\" , \"North_America\" ] ) , UnfilterFrame ( Region ) , SetFrameFilter ( Region \u003d\u003d [ \"Latin_America_and_Caribbean\" , \"Western_Europe\" , \"North_America\" ] ) ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) ) .as ( [ Region , AverageofGDP_13 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 ) .as ( [ Region , GDP_13 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 ) .as ( [ Region , GDP_13 , GDP_14 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_16\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_16 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_16 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" , \"GDP_16\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 ) .as ( [ Region , GDP_13 , GDP_14 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" , \"GDP_15\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"GDP_16\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 1 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"rotateAxis\" : false } } } ) ;Panel ( 1 ) | RetrievePanelOrnaments ( \"tools.shared.rotateAxis\" ) ;Panel ( 1 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"top\" , \"rotate\" : \"0\" , \"align\" : \"center\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"12\" , \"fontWeight\" : \"normal\" } } } } ) ;Panel ( 1 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 1 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" , \"GDP_15\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"GDP_16\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 1 ) | SetPanelLabel ( \u0027Region_GDP\u0027 ) ;Panel ( 0 ) | AddPanelEvents ( { \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif(IsEmpty(\u003cSelectedValues\u003e), UnfilterFrame(\u003cSelectedColumn\u003e), SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e)); ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \\\"1\\\" : { \\\"layout\\\" : \\\"Column\\\" , \\\"alignment\\\" : { \\\"label\\\" : [ \\\"Region\\\" ] , \\\"value\\\" : [ \\\"AverageofGDP_13\\\" , \\\"AverageofGDP_14\\\" , \\\"AverageofGDP_15\\\" , \\\"AverageofGDP_16\\\" ] , \\\"facet\\\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \\\"1\\\" : { \\\"layout\\\" : \\\"Column\\\" , \\\"alignment\\\" : { \\\"label\\\" : [ \\\"Region\\\" ] , \\\"value\\\" : [ \\\"GDP_13\\\" , \\\"GDP_14\\\" , \\\"GDP_15\\\" , \\\"GDP_16\\\" ] , \\\"facet\\\" : [ ] } } } ) | Collect ( 500 ) ) ) ;\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : true , \"disabledVisuals\" : [ ] } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | AddPanelEvents ( { \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif(IsEmpty(\u003cSelectedValues\u003e), UnfilterFrame(\u003cSelectedColumn\u003e), SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : true , \"disabledVisuals\" : [ ] } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;if ( IsEmpty ( [ \"North_America\" , \"Australia_and_New_Zealand\" ] ) , UnfilterFrame ( Region ) , SetFrameFilter ( Region \u003d\u003d [ \"North_America\" , \"Australia_and_New_Zealand\" ] ) ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;if ( IsEmpty ( [ \"Southeastern_Asia\" , \"Middle_East_and_Northern_Africa\" , \"Latin_America_and_Caribbean\" ] ) , UnfilterFrame ( Region ) , SetFrameFilter ( Region \u003d\u003d [ \"Southeastern_Asia\" , \"Middle_East_and_Northern_Africa\" , \"Latin_America_and_Caribbean\" ] ) ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;if ( IsEmpty ( [ \"Sub-Saharan_Africa\" , \"Southern_Asia\" ] ) , UnfilterFrame ( Region ) , SetFrameFilter ( Region \u003d\u003d [ \"Sub-Saharan_Africa\" , \"Southern_Asia\" ] ) ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;if ( IsEmpty ( [ \"Central_and_Eastern_Europe\" , \"Eastern_Asia\" , \"Southeastern_Asia\" ] ) , UnfilterFrame ( Region ) , SetFrameFilter ( Region \u003d\u003d [ \"Central_and_Eastern_Europe\" , \"Eastern_Asia\" , \"Southeastern_Asia\" ] ) ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;\u003cj\u003e\u003cencode\u003esynchronizeGridToRDataTable(\"FRAME370944\")\u003c/encode\u003e\u003c/j\u003e ;Frame ( ) | Select ( Country , GDP_13 , GDP_14 , GDP_15 , GDP_16 , Happiness_Rank , Happiness_Score , Region , Year ) .as ( [ Country , GDP_13 , GDP_14 , GDP_15 , GDP_16 , Happiness_Rank , Happiness_Score , Region , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"GDP_16\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Region\" , \"Year\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"GDP_16\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 1 ) | SetPanelLabel ( \u0027Region_GDP_2013-2016\u0027 ) ;Panel(0)|AddPanelOrnaments({\"showMenu\":true});Panel(0)|RetrievePanelOrnaments(\"showMenu\");Panel(1)|AddPanelOrnaments({\"showMenu\":true});Panel(1)|RetrievePanelOrnaments(\"showMenu\");"
}