{
  "layout": "Column",
  "rdbmsId": "acc6af01-ef02-43a5-a1a4-c22d55ada331",
  "hidden": false,
  "engine": "happyCountryDB",
  "insightName": "Region_Scores",
  "recipe": "AddPanel ( 0 ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eUnfilterFrame(\u003cSelectedColumn\u003e);\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : true , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif(IsEmpty(\u003cSelectedValues\u003e), UnfilterFrame(\u003cSelectedColumn\u003e), SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : true , \"default\" : true , \"disabled\" : false } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;Panel ( 0 ) | SetPanelView ( \"federate-view\" , \"\u003cencode\u003e{\"core_engine\":\"happyCountryDB\"}\u003c/encode\u003e\" ) ;CreateFrame ( grid ) .as ( [ \u0027FRAME129605\u0027 ] ) ;Database ( happyCountryDB ) | Select ( Country , Country__Dystopia_Residual , Country__Economy_GDP_per_Capita , Country__Family , Country__Freedom , Country__Generosity , Country__Happiness_Rank , Country__Happiness_Score , Country__Health_Life_Expectancy , Country__Region , Country__Standard_Error , Country__Trust_Government_Corruption , Country__Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Import ( ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Happiness_Rank ) ) .as ( [ Country , AverageofHappiness_Rank ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Country\" ] , \"value\" : [ \"AverageofHappiness_Rank\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Happiness_Rank ) .as ( [ Country , Happiness_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Country\" ] , \"value\" : [ \"Happiness_Rank\" ] } } } ) | Collect ( 500 ) ) ) ;\u003cj\u003e\u003cencode\u003esynchronizeGridToRDataTable(\"FRAME129605\")\u003c/encode\u003e\u003c/j\u003e ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;DropRows ( Filter ( Year \u003d\u003d \"2015\" ) ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Happiness_Rank ) ) .as ( [ Country , AverageofHappiness_Rank ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Country\" ] , \"value\" : [ \"AverageofHappiness_Rank\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Happiness_Rank ) .as ( [ Country , Happiness_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Country\" ] , \"value\" : [ \"Happiness_Rank\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Happiness_Score ) ) .as ( [ Country , AverageofHappiness_Score ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Country\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Happiness_Score ) .as ( [ Country , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Country\" ] , \"value\" : [ \"Happiness_Score\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country , Region ) ) , ( Select ( Country , Region , Average ( Happiness_Score ) ) .as ( [ Country , Region , AverageofHappiness_Score ] ) | Group ( Country , Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Country\" , \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Region , Happiness_Score ) .as ( [ Country , Region , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Country\" , \"Region\" ] , \"value\" : [ \"Happiness_Score\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Score ) .as ( [ Region , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Score\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region , Country ) ) , ( Select ( Region , Country , Average ( Happiness_Score ) ) .as ( [ Region , Country , AverageofHappiness_Score ] ) | Group ( Region , Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Region\" , \"Country\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Country , Happiness_Score ) .as ( [ Region , Country , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Region\" , \"Country\" ] , \"value\" : [ \"Happiness_Score\" ] } } } ) | Collect ( 500 ) ) ) ;Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Select ( ( ( 157 - Happiness_Rank ) + 1 ) , Happiness_Rank ) .as ( [ Inverse_Rank , Happiness_Rank ] ) | Merge ( ( Happiness_Rank , inner.join , Happiness_Rank ) ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year , Inverse_Rank ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Region , Standard_Error , Trust_Government_Corruption , Year , Inverse_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" , \"Inverse_Rank\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Region , Country ) ) , ( Select ( Region , Country , Average ( Happiness_Score ) ) .as ( [ Region , Country , AverageofHappiness_Score ] ) | Group ( Region , Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Region\" , \"Country\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Country , Happiness_Score ) .as ( [ Region , Country , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Region\" , \"Country\" ] , \"value\" : [ \"Happiness_Score\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region , Country ) ) , ( Select ( Region , Country , Average ( Inverse_Rank ) ) .as ( [ Region , Country , AverageofInverse_Rank ] ) | Group ( Region , Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Region\" , \"Country\" ] , \"value\" : [ \"AverageofInverse_Rank\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Country , Inverse_Rank ) .as ( [ Region , Country , Inverse_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Pack\" , \"alignment\" : { \"group\" : [ \"Region\" , \"Country\" ] , \"value\" : [ \"Inverse_Rank\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region , Country ) ) , ( Select ( Region , Country , Average ( Inverse_Rank ) ) .as ( [ Region , Country , AverageofInverse_Rank ] ) | Group ( Region , Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"TreeMap\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"label\" : [ \"Country\" ] , \"size\" : [ \"AverageofInverse_Rank\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Country , Inverse_Rank ) .as ( [ Region , Country , Inverse_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"TreeMap\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"label\" : [ \"Country\" ] , \"size\" : [ \"Inverse_Rank\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region , Country , Happiness_Score ) ) , ( Select ( Region , Country , Average ( Inverse_Rank ) , Happiness_Score ) .as ( [ Region , Country , AverageofInverse_Rank , Happiness_Score ] ) | Group ( Region , Country , Happiness_Score ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"TreeMap\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"label\" : [ \"Country\" ] , \"size\" : [ \"AverageofInverse_Rank\" ] , \"facet\" : [ ] , \"tooltip\" : [ \"Happiness_Score\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Country , Inverse_Rank , Happiness_Score ) .as ( [ Region , Country , Inverse_Rank , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"TreeMap\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"label\" : [ \"Country\" ] , \"size\" : [ \"Inverse_Rank\" ] , \"facet\" : [ ] , \"tooltip\" : [ \"Happiness_Score\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region , Country ) ) , ( Select ( Region , Country , Average ( Inverse_Rank ) , UniqueGroupConcat ( Happiness_Score ) ) .as ( [ Region , Country , AverageofInverse_Rank , UniqueGroupConcatofHappiness_Score ] ) | Group ( Region , Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"Region\" ] , \"y\" : [ \"Country\" ] , \"heat\" : [ \"AverageofInverse_Rank\" ] , \"facet\" : [ ] , \"tooltip\" : [ \"UniqueGroupConcatofHappiness_Score\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Country , Inverse_Rank , Happiness_Score ) .as ( [ Region , Country , Inverse_Rank , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"Region\" ] , \"y\" : [ \"Country\" ] , \"heat\" : [ \"Inverse_Rank\" ] , \"facet\" : [ ] , \"tooltip\" : [ \"Happiness_Score\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country , Region ) ) , ( Select ( Country , Region , Average ( Inverse_Rank ) , UniqueGroupConcat ( Happiness_Score ) ) .as ( [ Country , Region , AverageofInverse_Rank , UniqueGroupConcatofHappiness_Score ] ) | Group ( Country , Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"Country\" ] , \"y\" : [ \"Region\" ] , \"heat\" : [ \"AverageofInverse_Rank\" ] , \"facet\" : [ ] , \"tooltip\" : [ \"UniqueGroupConcatofHappiness_Score\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Region , Inverse_Rank , Happiness_Score ) .as ( [ Country , Region , Inverse_Rank , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"Country\" ] , \"y\" : [ \"Region\" ] , \"heat\" : [ \"Inverse_Rank\" ] , \"facet\" : [ ] , \"tooltip\" : [ \"Happiness_Score\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region , Country ) ) , ( Select ( Region , Country , Average ( Inverse_Rank ) , UniqueGroupConcat ( Happiness_Score ) ) .as ( [ Region , Country , AverageofInverse_Rank , UniqueGroupConcatofHappiness_Score ] ) | Group ( Region , Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"Region\" ] , \"y\" : [ \"Country\" ] , \"heat\" : [ \"AverageofInverse_Rank\" ] , \"facet\" : [ ] , \"tooltip\" : [ \"UniqueGroupConcatofHappiness_Score\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Country , Inverse_Rank , Happiness_Score ) .as ( [ Region , Country , Inverse_Rank , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"Region\" ] , \"y\" : [ \"Country\" ] , \"heat\" : [ \"Inverse_Rank\" ] , \"facet\" : [ ] , \"tooltip\" : [ \"Happiness_Score\" ] } } } ) | Collect ( 500 ) ) ) ;Select ( Region , Country , Happiness_Score , Inverse_Rank ) .as ( [ Region , Country , Happiness_Score , Inverse_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Cluster\" , \"alignment\" : { \"cluster\" : [ \"Region\" ] , \"label\" : [ \"Country\" ] , \"tooltip\" : [ \"Happiness_Score\" , \"Inverse_Rank\" ] } } } ) | Collect ( 500 ) ;Select ( Happiness_Rank , Country ) .as ( [ Happiness_Rank , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Cluster\" , \"alignment\" : { \"cluster\" : [ \"Happiness_Rank\" ] , \"label\" : [ \"Country\" ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ;Select ( Happiness_Rank , Region ) .as ( [ Happiness_Rank , Region ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Cluster\" , \"alignment\" : { \"cluster\" : [ \"Happiness_Rank\" ] , \"label\" : [ \"Region\" ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ;Select ( Happiness_Score , Region ) .as ( [ Happiness_Score , Region ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Cluster\" , \"alignment\" : { \"cluster\" : [ \"Happiness_Score\" ] , \"label\" : [ \"Region\" ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ;Select ( Happiness_Score , Country ) .as ( [ Happiness_Score , Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Cluster\" , \"alignment\" : { \"cluster\" : [ \"Happiness_Score\" ] , \"label\" : [ \"Country\" ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Region , Happiness_Score ) ) , ( Select ( Region , Happiness_Score , Average ( Happiness_Rank ) ) .as ( [ Region , Happiness_Score , AverageofHappiness_Rank ] ) | Group ( Region , Happiness_Score ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Sunburst\" , \"alignment\" : { \"group\" : [ \"Region\" , \"Happiness_Score\" ] , \"value\" : [ \"AverageofHappiness_Rank\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Score , Happiness_Rank ) .as ( [ Region , Happiness_Score , Happiness_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Sunburst\" , \"alignment\" : { \"group\" : [ \"Region\" , \"Happiness_Score\" ] , \"value\" : [ \"Happiness_Rank\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Rank ) ) .as ( [ Region , AverageofHappiness_Rank ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Sunburst\" , \"alignment\" : { \"group\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Rank\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Rank ) .as ( [ Region , Happiness_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Sunburst\" , \"alignment\" : { \"group\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Rank\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Rank ) ) .as ( [ Region , AverageofHappiness_Rank ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Sankey\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Rank\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Rank ) .as ( [ Region , Happiness_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Sankey\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Rank\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region , Country ) ) , ( Select ( Region , Country , Average ( Happiness_Rank ) ) .as ( [ Region , Country , AverageofHappiness_Rank ] ) | Group ( Region , Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Sankey\" , \"alignment\" : { \"label\" : [ \"Region\" , \"Country\" ] , \"value\" : [ \"AverageofHappiness_Rank\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Country , Happiness_Rank ) .as ( [ Region , Country , Happiness_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Sankey\" , \"alignment\" : { \"label\" : [ \"Region\" , \"Country\" ] , \"value\" : [ \"Happiness_Rank\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Rank ) ) .as ( [ Region , AverageofHappiness_Rank ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Funnel\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Rank\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Rank ) .as ( [ Region , Happiness_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Funnel\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Rank\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Rank ) ) .as ( [ Region , AverageofHappiness_Rank ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Radar\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Rank\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Rank ) .as ( [ Region , Happiness_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Radar\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Rank\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 0 ) | SetPanelView ( \"infographic\" ) ;Panel ( 0 ) | SetPanelView ( \"infographic\" ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" ) ;if ( ( HasDuplicates ( Region , Country , Happiness_Score ) ) , ( Select ( Region , Country , Average ( Inverse_Rank ) , Happiness_Score ) .as ( [ Region , Country , AverageofInverse_Rank , Happiness_Score ] ) | Group ( Region , Country , Happiness_Score ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"TreeMap\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"label\" : [ \"Country\" ] , \"size\" : [ \"AverageofInverse_Rank\" ] , \"facet\" : [ ] , \"tooltip\" : [ \"Happiness_Score\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Country , Inverse_Rank , Happiness_Score ) .as ( [ Region , Country , Inverse_Rank , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"TreeMap\" , \"alignment\" : { \"series\" : [ \"Region\" ] , \"label\" : [ \"Country\" ] , \"size\" : [ \"Inverse_Rank\" ] , \"facet\" : [ ] , \"tooltip\" : [ \"Happiness_Score\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Count ( Region ) ) .as ( [ Country , CountofRegion ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Bubble\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"value\" : [ \"CountofRegion\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Count ( Region ) ) .as ( [ Country , CountofRegion ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Bubble\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"value\" : [ \"CountofRegion\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Average ( Happiness_Score ) ) .as ( [ Country , AverageofHappiness_Score ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Bubble\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Happiness_Score ) .as ( [ Country , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Bubble\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"value\" : [ \"Happiness_Score\" ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Bubble\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Score ) .as ( [ Region , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Bubble\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Score\" ] } } } ) | Collect ( 500 ) ) ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Bubble\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Score ) .as ( [ Region , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Score ) .as ( [ Region , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;if ( IsEmpty ( [ \"Western_Europe\" ] ) , UnfilterFrame ( Region ) , SetFrameFilter ( Region \u003d\u003d [ \"Western_Europe\" ] ) ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;if ( IsEmpty ( [ \"North_America\" , \"Southeastern_Asia\" , \"Southern_Asia\" ] ) , UnfilterFrame ( Region ) , SetFrameFilter ( Region \u003d\u003d [ \"North_America\" , \"Southeastern_Asia\" , \"Southern_Asia\" ] ) ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | SetPanelSort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"desc\" ] ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"toggleShadow\" : true } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.toggleShadow\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"toggleShadow\" : false } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.toggleShadow\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"toggleAverage\" : true } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.toggleAverage\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"toggleExtremes\" : true } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.toggleExtremes\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"toggleExtremes\" : false } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.toggleExtremes\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"insideTop\" , \"rotate\" : \"0\" , \"align\" : \"center\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"12\" , \"fontWeight\" : \"normal\" } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"top\" , \"rotate\" : \"0\" , \"align\" : \"center\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"12\" , \"fontWeight\" : \"normal\" } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"toggleTrendline\" : \"No Trendline\" } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.toggleTrendline\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"toggleAverage\" : false } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.toggleAverage\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"rotateAxis\" : true } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.rotateAxis\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"right\" , \"rotate\" : \"0\" , \"align\" : \"center\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"12\" , \"fontWeight\" : \"normal\" } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"insideRight\" , \"rotate\" : \"0\" , \"align\" : \"center\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"12\" , \"fontWeight\" : \"normal\" } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"insideRight\" , \"rotate\" : \"0\" , \"align\" : \"left\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"12\" , \"fontWeight\" : \"normal\" } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"right\" , \"rotate\" : \"0\" , \"align\" : \"right\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"12\" , \"fontWeight\" : \"normal\" } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"right\" , \"rotate\" : \"0\" , \"align\" : \"right\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"15\" , \"fontWeight\" : \"bold\" } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"left\" , \"rotate\" : \"0\" , \"align\" : \"right\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"15\" , \"fontWeight\" : \"bold\" } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"inside\" , \"rotate\" : \"0\" , \"align\" : \"right\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"15\" , \"fontWeight\" : \"bold\" } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 0 ) | SetPanelSort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"asc\" ] ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"Semoss\" , \"color\" : { \"AverageofHappiness Score\" : \"#4FA4DE\" } } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"One\" , \"color\" : { \"AverageofHappiness Score\" : \"#4E79A7\" } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"Semoss\" , \"color\" : { \"AverageofHappiness Score\" : \"#4FA4DE\" } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"Six\" , \"color\" : { \"AverageofHappiness Score\" : \"#FFCCCC\" } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"Semoss\" , \"color\" : { \"AverageofHappiness Score\" : \"#4FA4DE\" } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools\" ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Score ) .as ( [ Region , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"Semoss\" , \"color\" : { \"AverageofHappiness Score\" : \"#4FA4DE\" } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools\" ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Score ) .as ( [ Region , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"Semoss\" , \"color\" : { \"AverageofHappiness Score\" : \"#4FA4DE\" } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools\" ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Rank ) ) .as ( [ Region , AverageofHappiness_Rank ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Rank\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Rank ) .as ( [ Region , Happiness_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Rank\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Score ) .as ( [ Region , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Rank ) ) .as ( [ Region , AverageofHappiness_Rank ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Rank\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Rank ) .as ( [ Region , Happiness_Rank ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Rank\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Happiness_Score ) .as ( [ Region , Happiness_Score ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Happiness_Score\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 0 ) | SetPanelLabel ( \u0027Region_Scores\u0027 ) ;Panel ( 0 ) | SetPanelLabel ( \u0027Region_Scores\u0027 ) ;Panel ( 0 ) | Clone ( 1 ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Economy_GDP_per_Capita ) ) .as ( [ Region , AverageofEconomy_GDP_per_Capita ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofEconomy_GDP_per_Capita\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Economy_GDP_per_Capita ) .as ( [ Region , Economy_GDP_per_Capita ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Economy_GDP_per_Capita\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Database ( GDPPC ) | Select ( Country_Name , Country_Name__A2010 ) .as ( [ Country_Name , A2010 ] ) | Merge ( ( Country , inner.join , Country_Name ) ) ;Frame ( ) | Select ( A2010 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ A2010 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2010\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Database ( GDPPC ) | Select ( Country_Name , Country_Name__A2011 ) .as ( [ Country_Name , A2011 ] ) | Merge ( ( Country , inner.join , Country_Name ) ) ;Frame ( ) | Select ( A2010 , A2011 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ A2010 , A2011 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2010\" , \"A2011\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Database ( GDPPC ) | Select ( Country_Name , Country_Name__A2013 ) .as ( [ Country_Name , A2013 ] ) | Merge ( ( Country , inner.join , Country_Name ) ) ;Frame ( ) | Select ( A2010 , A2011 , A2013 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ A2010 , A2011 , A2013 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2010\" , \"A2011\" , \"A2013\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Database ( GDPPC ) | Select ( Country_Name , Country_Name__A2014 ) .as ( [ Country_Name , A2014 ] ) | Merge ( ( Country , inner.join , Country_Name ) ) ;Frame ( ) | Select ( A2010 , A2011 , A2013 , A2014 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ A2010 , A2011 , A2013 , A2014 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2010\" , \"A2011\" , \"A2013\" , \"A2014\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Database ( GDPPC ) | Select ( Country_Name , Country_Name__A2015 ) .as ( [ Country_Name , A2015 ] ) | Merge ( ( Country , inner.join , Country_Name ) ) ;Frame ( ) | Select ( A2010 , A2011 , A2013 , A2014 , A2015 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ A2010 , A2011 , A2013 , A2014 , A2015 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2010\" , \"A2011\" , \"A2013\" , \"A2014\" , \"A2015\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Database ( GDPPC ) | Select ( Country_Name , Country_Name__A2016 ) .as ( [ Country_Name , A2016 ] ) | Merge ( ( Country , inner.join , Country_Name ) ) ;Frame ( ) | Select ( A2010 , A2011 , A2013 , A2014 , A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ A2010 , A2011 , A2013 , A2014 , A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2010\" , \"A2011\" , \"A2013\" , \"A2014\" , \"A2015\" , \"A2016\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( A2010 , A2011 , A2013 , A2014 , A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ A2010 , A2011 , A2013 , A2014 , A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2010\" , \"A2011\" , \"A2013\" , \"A2014\" , \"A2015\" , \"A2016\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;DropColumn ( \"A2010\" ) ;Frame ( ) | Select ( A2011 , A2013 , A2014 , A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ A2011 , A2013 , A2014 , A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2011\" , \"A2013\" , \"A2014\" , \"A2015\" , \"A2016\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;DropColumn ( \"A2011\" ) ;Frame ( ) | Select ( A2013 , A2014 , A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ A2013 , A2014 , A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2013\" , \"A2014\" , \"A2015\" , \"A2016\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;RenameColumn ( A2013 , \"GDP_13\" ) ;Frame ( ) | Select ( GDP_13 , A2014 , A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ GDP_13 , A2014 , A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"GDP_13\" , \"A2014\" , \"A2015\" , \"A2016\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( A2014 , A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ A2014 , A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2014\" , \"A2015\" , \"A2016\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"GDP_13\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;RenameColumn ( A2014 , \"GDP_14\" ) ;Frame ( ) | Select ( GDP_14 , A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ GDP_14 , A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"GDP_14\" , \"A2015\" , \"A2016\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"GDP_13\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ A2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2015\" , \"A2016\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"GDP_13\" , \"GDP_14\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;RenameColumn ( A2015 , \"GDP_2015\" ) ;Frame ( ) | Select ( GDP_2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ GDP_2015 , A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"GDP_2015\" , \"A2016\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"GDP_13\" , \"GDP_14\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_2015 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ A2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_2015 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"A2016\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"GDP_13\" , \"GDP_14\" , \"GDP_2015\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;RenameColumn ( A2016 , \"GDP_2016\" ) ;Frame ( ) | Select ( GDP_2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_2015 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ GDP_2016 , Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_2015 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"GDP_2016\" , \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"GDP_13\" , \"GDP_14\" , \"GDP_2015\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_2015 , GDP_2016 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_2015 , GDP_2016 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"GDP_13\" , \"GDP_14\" , \"GDP_2015\" , \"GDP_2016\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Economy_GDP_per_Capita ) ) .as ( [ Region , AverageofEconomy_GDP_per_Capita ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofEconomy_GDP_per_Capita\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Economy_GDP_per_Capita ) .as ( [ Region , Economy_GDP_per_Capita ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Economy_GDP_per_Capita\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_2015 , GDP_2016 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_2015 , GDP_2016 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"GDP_13\" , \"GDP_14\" , \"GDP_2015\" , \"GDP_2016\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;RenameColumn ( GDP_2015 , \"GDP_15\" ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_15 , GDP_2016 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_15 , GDP_2016 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"GDP_2016\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_15 , GDP_2016 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_15 , GDP_2016 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"GDP_2016\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;RenameColumn ( GDP_2016 , \"GDP_16\" ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_15 , GDP_16 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_15 , GDP_16 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"GDP_16\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_15 , GDP_16 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ) .as ( [ Country , Dystopia_Residual , Economy_GDP_per_Capita , Family , Freedom , GDP_13 , GDP_14 , GDP_15 , GDP_16 , Generosity , Happiness_Rank , Happiness_Score , Health_Life_Expectancy , Inverse_Rank , Region , Standard_Error , Trust_Government_Corruption , Year ] ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Dystopia_Residual\" , \"Economy_GDP_per_Capita\" , \"Family\" , \"Freedom\" , \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"GDP_16\" , \"Generosity\" , \"Happiness_Rank\" , \"Happiness_Score\" , \"Health_Life_Expectancy\" , \"Inverse_Rank\" , \"Region\" , \"Standard_Error\" , \"Trust_Government_Corruption\" , \"Year\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( Economy_GDP_per_Capita ) ) .as ( [ Region , AverageofEconomy_GDP_per_Capita ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofEconomy_GDP_per_Capita\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , Economy_GDP_per_Capita ) .as ( [ Region , Economy_GDP_per_Capita ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"Economy_GDP_per_Capita\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) ) .as ( [ Region , AverageofGDP_13 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 ) .as ( [ Region , GDP_13 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 ) .as ( [ Region , GDP_13 , GDP_14 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" , \"GDP_15\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 1 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"rotateAxis\" : false } } } ) ;Panel ( 1 ) | RetrievePanelOrnaments ( \"tools.shared.rotateAxis\" ) ;Panel ( 1 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : false } } } ) ;Panel ( 1 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 1 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true } } } ) ;Panel ( 1 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;Panel ( 1 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"displayValues\" : true , \"customizeBarLabel\" : { \"showLabel\" : \"Yes\" , \"position\" : \"top\" , \"rotate\" : \"0\" , \"align\" : \"center\" , \"fontFamily\" : \"sans-serif\" , \"fontSize\" : \"12\" , \"fontWeight\" : \"normal\" } } } } ) ;Panel ( 1 ) | RetrievePanelOrnaments ( \"tools.shared.customizeBarLabel\" ) ;Panel ( 1 ) | RetrievePanelOrnaments ( \"tools.shared.displayValues\" ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 ) .as ( [ Region , GDP_13 , GDP_14 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" , \"GDP_15\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"GDP_16\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 0 ) | AddPanelEvents ( { \"onBrush\" : { \"Filter\" : [ { \"panel\" : 1 , \"query\" : \"\u003cencode\u003eSetFrameFilter(\\\"\u003cSelectedValue\u003e\\\"); if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \\\"1\\\" : { \\\"layout\\\" : \\\"Column\\\" , \\\"alignment\\\" : { \\\"label\\\" : [ \\\"Region\\\" ] , \\\"value\\\" : [ \\\"AverageofGDP_13\\\" , \\\"AverageofGDP_14\\\" , \\\"AverageofGDP_15\\\" , \\\"AverageofGDP_16\\\" ] , \\\"facet\\\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \\\"1\\\" : { \\\"layout\\\" : \\\"Column\\\" , \\\"alignment\\\" : { \\\"label\\\" : [ \\\"Region\\\" ] , \\\"value\\\" : [ \\\"GDP_13\\\" , \\\"GDP_14\\\" , \\\"GDP_15\\\" , \\\"GDP_16\\\" ] , \\\"facet\\\" : [ ] } } } ) | Collect ( 500 ) ) ) ;\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"disabledVisuals\" : [ ] } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;SetFrameFilter ( \"Western_Europe\" ) ;if ( ( HasDuplicates ( Region ) ) , ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"GDP_13\" , \"GDP_14\" , \"GDP_15\" , \"GDP_16\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel ( 1 ) | SetPanelLabel ( \u0027Region_GDP\u0027 ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | AddPanelEvents ( { \"onBrush\" : { \"Filter_Region_GDP\" : [ { \"panel\" : 1 , \"query\" : \"\u003cencode\u003eFrame ( ) | SetFrameFilter (Region \u003d\u003d [\\\"\u003cSelectedValue\u003e\\\"]) ; ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \\\"1\\\" : { \\\"layout\\\" : \\\"Column\\\" , \\\"alignment\\\" : { \\\"label\\\" : [ \\\"Region\\\" ] , \\\"value\\\" : [ \\\"AverageofGDP_13\\\" , \\\"AverageofGDP_14\\\" , \\\"AverageofGDP_15\\\" , \\\"AverageofGDP_16\\\" ] , \\\"facet\\\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \\\"1\\\" : { \\\"layout\\\" : \\\"Column\\\" , \\\"alignment\\\" : { \\\"label\\\" : [ \\\"Region\\\" ] , \\\"value\\\" : [ \\\"GDP_13\\\" , \\\"GDP_14\\\" , \\\"GDP_15\\\" , \\\"GDP_16\\\" ] , \\\"facet\\\" : [ ] } } } ) | Collect ( 500 ) ) ) ;\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"disabledVisuals\" : [ ] } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | AddPanelEvents ( { \"onBrush\" : { \"Filter_Region_GDP\" : [ { \"panel\" : 1 , \"query\" : \"\u003cencode\u003eif(IsEmpty(\u003cSelectedValues\u003e), UnfilterFrame(\u003cSelectedColumn\u003e), SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e));Frame ( ) | SetFrameFilter (Region \u003d\u003d [\\\"\u003cSelectedValue\u003e\\\"]) ; ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \\\"1\\\" : { \\\"layout\\\" : \\\"Column\\\" , \\\"alignment\\\" : { \\\"label\\\" : [ \\\"Region\\\" ] , \\\"value\\\" : [ \\\"AverageofGDP_13\\\" , \\\"AverageofGDP_14\\\" , \\\"AverageofGDP_15\\\" , \\\"AverageofGDP_16\\\" ] , \\\"facet\\\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \\\"1\\\" : { \\\"layout\\\" : \\\"Column\\\" , \\\"alignment\\\" : { \\\"label\\\" : [ \\\"Region\\\" ] , \\\"value\\\" : [ \\\"GDP_13\\\" , \\\"GDP_14\\\" , \\\"GDP_15\\\" , \\\"GDP_16\\\" ] , \\\"facet\\\" : [ ] } } } ) | Collect ( 500 ) ) ) ;\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"disabledVisuals\" : [ ] } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | RemovePanelEvents ( \"onBrush.Filter\" ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | AddPanelEvents ( { \"onBrush\" : { \"Filter_Region_GDP\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003ePanel(\u003cPanel\u003e)|AddPanelOrnaments({\\\"tools\\\":{\\\"shared\\\":{\\\"highlight\\\":{\\\"data\\\":{\\\"\u003cSelectedColumn\u003e\\\":\u003cSelectedValues\u003e}}}}});Panel(\u003cPanel\u003e)|RetrievePanelOrnaments();\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"disabledVisuals\" : [ ] } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | AddPanelEvents ( { \"onDoubleClick\" : { \"Filter_Region_GDP\" : [ { \"panel\" : 1 , \"query\" : \"\u003cencode\u003eFrame ( ) | SetFrameFilter (Country \u003d\u003d [\\\"\u003cSelectedValue\u003e\\\"]) ; ( Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \\\"1\\\" : { \\\"layout\\\" : \\\"Column\\\" , \\\"alignment\\\" : { \\\"label\\\" : [ \\\"Region\\\" ] , \\\"value\\\" : [ \\\"AverageofGDP_13\\\" , \\\"AverageofGDP_14\\\" , \\\"AverageofGDP_15\\\" , \\\"AverageofGDP_16\\\" ] , \\\"facet\\\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ) .as ( [ Region , GDP_13 , GDP_14 , GDP_15 , GDP_16 ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \\\"1\\\" : { \\\"layout\\\" : \\\"Column\\\" , \\\"alignment\\\" : { \\\"label\\\" : [ \\\"Region\\\" ] , \\\"value\\\" : [ \\\"GDP_13\\\" , \\\"GDP_14\\\" , \\\"GDP_15\\\" , \\\"GDP_16\\\" ] , \\\"facet\\\" : [ ] } } } ) | Collect ( 500 ) ) ) ;\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"disabledVisuals\" : [ ] } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | AddPanelEvents ( { \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003ePanel(\u003cPanel\u003e)|AddPanelOrnaments({\\\"tools\\\":{\\\"shared\\\":{\\\"highlight\\\":{\\\"data\\\":{\\\"\u003cSelectedColumn\u003e\\\":\u003cSelectedValues\u003e}}}}});Panel(\u003cPanel\u003e)|RetrievePanelOrnaments();\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"disabledVisuals\" : [ ] } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | RemovePanelEvents ( \"onBrush.Filter_Region_GDP\" ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;Panel ( 0 ) | AddPanelEvents ( { \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif(IsEmpty(\u003cSelectedValues\u003e), UnfilterFrame(\u003cSelectedColumn\u003e), SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"disabledVisuals\" : [ ] } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;if ( IsEmpty ( [ \"North_America\" , \"Australia_and_New_Zealand\" ] ) , UnfilterFrame ( Region ) , SetFrameFilter ( Region \u003d\u003d [ \"North_America\" , \"Australia_and_New_Zealand\" ] ) ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;if ( IsEmpty ( [ \"Latin_America_and_Caribbean\" , \"Western_Europe\" ] ) , UnfilterFrame ( Region ) , SetFrameFilter ( Region \u003d\u003d [ \"Latin_America_and_Caribbean\" , \"Western_Europe\" ] ) ) ;UnfilterFrame ( Region ) ;Frame ( ) | Select ( Region , Average ( Happiness_Score ) ) .as ( [ Region , AverageofHappiness_Score ] ) | Sort ( columns \u003d [ \"AverageofHappiness_Score\" ] , sort \u003d [ \"ASC\" ] ) | Group ( Region ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofHappiness_Score\" ] } } } ) | Collect ( 500 ) ;Frame ( ) | Select ( Region , Average ( GDP_13 ) , Average ( GDP_14 ) , Average ( GDP_15 ) , Average ( GDP_16 ) ) .as ( [ Region , AverageofGDP_13 , AverageofGDP_14 , AverageofGDP_15 , AverageofGDP_16 ] ) | Group ( Region ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"Region\" ] , \"value\" : [ \"AverageofGDP_13\" , \"AverageofGDP_14\" , \"AverageofGDP_15\" , \"AverageofGDP_16\" ] } } } ) | Collect ( 500 ) ;Panel(0)|AddPanelOrnaments({\"showMenu\":true});Panel(0)|RetrievePanelOrnaments(\"showMenu\");Panel(1)|AddPanelOrnaments({\"showMenu\":true});Panel(1)|RetrievePanelOrnaments(\"showMenu\");"
}